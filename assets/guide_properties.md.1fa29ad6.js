import{_ as t,o as e,c as d,d as a}from"./app.84b6ad67.js";const f='{"title":"Tree","description":"","frontmatter":{},"headers":[{"level":2,"title":"Tree","slug":"tree"},{"level":2,"title":"Nodes","slug":"nodes"},{"level":2,"title":"Node","slug":"node"},{"level":2,"title":"State","slug":"state"},{"level":2,"title":"Configuration","slug":"configuration"},{"level":2,"title":"Icons","slug":"icons"},{"level":3,"title":"shape","slug":"shape"},{"level":3,"title":"Class","slug":"class"},{"level":3,"title":"img","slug":"img"}],"relativePath":"guide/properties.md","lastUpdated":1632997386790}',o={},n=a(`<h2 id="tree"><a class="header-anchor" href="#tree" aria-hidden="true">#</a> Tree</h2><table><thead><tr><th>Prop</th><th>Type</th><th>Default</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>nodes</td><td><a href="#nodes">Object</a></td><td>{}</td><td>true</td><td>Nodes</td></tr><tr><td>config</td><td><a href="#configuration">IConfiguration</a></td><td>{}</td><td>true</td><td>Tree configuration</td></tr></tbody></table><iframe src="https://codesandbox.io/embed/basic-1g2jt?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="Basic" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h2 id="nodes"><a class="header-anchor" href="#nodes" aria-hidden="true">#</a> Nodes</h2><p>Type: <code>{ [id]: Node }</code><br> Default: <em>Empty Object</em></p><blockquote><p>If no node defined nothing will be displayed</p></blockquote><div class="language-js"><pre><code><span class="token punctuation">{</span>
    id1<span class="token operator">:</span> <span class="token punctuation">{</span>
        text<span class="token operator">:</span> <span class="token string">&quot;textid1&quot;</span><span class="token punctuation">,</span>
        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;id11&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        state<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    id11<span class="token operator">:</span> <span class="token punctuation">{</span>
        text<span class="token operator">:</span> <span class="token string">&quot;textid11&quot;</span><span class="token punctuation">,</span>
        children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        state<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    id2<span class="token operator">:</span> <span class="token punctuation">{</span>
        text
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="node"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h2><p>Type: <code>Object</code><br> Default: <em>Empty Object</em></p><blockquote><p>A node has the following structure:</p></blockquote><table><thead><tr><th>Prop</th><th>Type</th><th>Default</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>text</td><td>String</td><td>&quot;&quot;</td><td>false</td><td>Text displayed in the node</td></tr><tr><td>children</td><td>Array</td><td>[]</td><td>false</td><td>Array of children</td></tr><tr><td>state</td><td><a href="#state">INodeState</a></td><td>null</td><td>false</td><td>State of the node</td></tr></tbody></table><div class="language-js"><pre><code><span class="token punctuation">{</span>
    text<span class="token operator">:</span> <span class="token string">&quot;text example&quot;</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;childrenid1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;childrenid2&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    state<span class="token operator">:</span> <span class="token punctuation">{</span>
        opened<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        disabled<span class="token operator">:</span> <span class="token boolean">false</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="state"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h2><p>Type: <code>Object</code><br> Default: <em>Empty Object</em></p><table><thead><tr><th>Prop</th><th>Type</th><th>Default</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>opened</td><td>Boolean</td><td>false</td><td>false</td><td>Open or close the node</td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>false</td><td>Disable checkbox, node edition and Drag and drop</td></tr><tr><td>editable</td><td>Boolean</td><td>true</td><td>false</td><td>Node field can be edited</td></tr><tr><td>draggable</td><td>Boolean</td><td>true</td><td>false</td><td>Determine if a node is draggable or not</td></tr><tr><td>dropable</td><td>Boolean</td><td>true</td><td>false</td><td>Determine if a node is dropable or not</td></tr><tr><td>checked</td><td>Boolean</td><td>false</td><td>false</td><td>Node checkbox state</td></tr><tr><td>indeterminate</td><td>Boolean</td><td>false</td><td>false</td><td>Node checkbox indeterminate state</td></tr><tr><td>isLoading</td><td>Boolean</td><td>false</td><td>false</td><td>Used for <a href="./async.html">async loading</a></td></tr></tbody></table><h2 id="configuration"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Tree Configuration Type: <code>Object</code><br> Default: <em>Empty Object</em></p><table><thead><tr><th>Prop</th><th>Type</th><th>Default</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>roots</td><td>Array</td><td>[]</td><td>true</td><td>Roots of the tree, this property is mandaroty to build the tree</td></tr><tr><td>leaves</td><td>Array</td><td>[]</td><td>false</td><td>Leaves of the tree, if empty leaves will be nodes without children. Leaves does not have any Open / Close icon</td></tr><tr><td>padding</td><td>Number</td><td>25</td><td>false</td><td>Padding for each new level</td></tr><tr><td>editable</td><td>Boolean</td><td>false</td><td>false</td><td>Determine globally if nodes are editable. When false, no node is editable even if node state is editable</td></tr><tr><td>editing</td><td>String</td><td>null</td><td>false</td><td>The id of the current editing node</td></tr><tr><td>editableClass</td><td>String</td><td>&quot;editable&quot;</td><td>false</td><td>Customize node class when node is editable</td></tr><tr><td>checkboxes</td><td>Boolean</td><td>false</td><td>false</td><td>Show or hide checkboxes</td></tr><tr><td>checkMode</td><td>String</td><td>&quot;manual&quot;</td><td>false</td><td>Checkmode can be &quot;manual&quot; or &quot;auto&quot;. When auto mode is enabled, it triggers an event to check children</td></tr><tr><td>dragAndDrop</td><td>Boolean</td><td>false</td><td>false</td><td>Enable or disable globally drag and drop</td></tr><tr><td>keyboardNavigation</td><td>Boolean</td><td>false</td><td>false</td><td>Enable or disable keyboard navigation. enter: edit node esc: stop edit node up: focus previous node down: focus next node space: check / uncheck checkbox</td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>false</td><td>Disable all tree nodes</td></tr><tr><td>disabledClass</td><td>String</td><td>&quot;disabled&quot;</td><td>false</td><td>Customize node class when node is disabled</td></tr><tr><td>openedIcon</td><td><a href="#icons">IIcon</a></td><td>{}</td><td>false</td><td>Customize icon when node is opened</td></tr><tr><td>closedIcon</td><td><a href="#icons">IIcon</a></td><td>{}</td><td>false</td><td>Customize icon when node is closed</td></tr><tr><td>focusClass</td><td>String</td><td>&quot;focused&quot;</td><td>false</td><td>Customize node class when node is focused</td></tr><tr><td>checkedClass</td><td>String</td><td>&quot;checked&quot;</td><td>false</td><td>Customize node class when node is checked</td></tr><tr><td>indeterminateClass</td><td>String</td><td>&quot;indeterminate&quot;</td><td>false</td><td>Customize node class when node is indeterminate</td></tr></tbody></table><h2 id="icons"><a class="header-anchor" href="#icons" aria-hidden="true">#</a> Icons</h2><p>Type: <code>Object</code><br> Default: <em>Empty Object</em></p><p>Open and close icons are customizable Icons can be:</p><ul><li>&quot;shape&quot; you can import a custom SVG shape.</li><li>&quot;class&quot; class svg icon (fontawsome like)</li><li>&quot;image&quot; a classic image coming from web or local image</li></ul><p>The following table describe properties by &quot;type&quot; but they are all included in the same interface</p><h3 id="shape"><a class="header-anchor" href="#shape" aria-hidden="true">#</a> shape</h3><p>Shape is a custom drawn shape. For more information you can consult <a href="https://developer.mozilla.org/en-US/docs/Web/SVG" target="_blank" rel="noopener noreferrer">SVG icon docs</a>.</p><table><thead><tr><th>Prop</th><th>Type</th><th>Default</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>type</td><td>String</td><td>&quot;shape&quot;</td><td>false</td><td>type can be &quot;shape&quot;, &quot;class&quot;, &quot;img&quot;</td></tr><tr><td>width</td><td>Number</td><td>null</td><td>false</td><td>width of the icon</td></tr><tr><td>height</td><td>Number</td><td>null</td><td>false</td><td>height of the icon</td></tr><tr><td>class</td><td>String / Array</td><td>null</td><td>false</td><td>Even if your icon is drawn you can add a class to it</td></tr><tr><td>style</td><td>String / Object</td><td>null</td><td>false</td><td>Inline icon style</td></tr><tr><td>viewbox</td><td>String</td><td>null</td><td>false</td><td>Viewbox of the drawn icon, for more information check svg icon doc</td></tr><tr><td>d</td><td>String</td><td>null</td><td>false</td><td>Icon drawn coordinates</td></tr><tr><td>fill</td><td>String</td><td>null</td><td>false</td><td>Fill color of the svg icon</td></tr><tr><td>stroke</td><td>String</td><td>null</td><td>false</td><td>SVG icon stroke property</td></tr></tbody></table><iframe src="https://codesandbox.io/embed/icon-shape-685od?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="Icon shape" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="class"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><p>A simple way to use svg icons is to design them with classes. To se how it work you can check <a href="https://fontawesome.com/" target="_blank" rel="noopener noreferrer">Front Awsome</a></p><table><thead><tr><th>Prop</th><th>Type</th><th>Default</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>type</td><td>String</td><td>&quot;class&quot;</td><td>false</td><td>type can be &quot;shape&quot;, &quot;class&quot;, &quot;img&quot;</td></tr><tr><td>class</td><td>String / Array</td><td>null</td><td>false</td><td>The corresponding svg class</td></tr><tr><td>style</td><td>String / Object</td><td></td><td></td><td></td></tr></tbody></table><iframe src="https://codesandbox.io/embed/icon-class-kst2h?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="Icon class" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h3 id="img"><a class="header-anchor" href="#img" aria-hidden="true">#</a> img</h3><p>You can also decide to use an image as Icon.</p><table><thead><tr><th>Prop</th><th>Type</th><th>Default</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>type</td><td>String</td><td>&quot;img&quot;</td><td>false</td><td>type can be &quot;shape&quot;, &quot;class&quot;, &quot;img&quot;</td></tr><tr><td>src</td><td>String</td><td>null</td><td>false</td><td>The image source</td></tr><tr><td>alt</td><td>String</td><td>null</td><td>false</td><td>The alt tag</td></tr><tr><td>width</td><td>Number</td><td>null</td><td>false</td><td>width of the icon</td></tr><tr><td>height</td><td>Number</td><td>null</td><td>false</td><td>height of the icon</td></tr><tr><td>class</td><td>String / Array</td><td>null</td><td>false</td><td>ven if your icon is an image you can add a class to it</td></tr><tr><td>style</td><td>String / Object</td><td>null</td><td>false</td><td>Inline icon style</td></tr></tbody></table><iframe src="https://codesandbox.io/embed/icon-image-3zwlp?fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden;" title="Icon image" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe>`,35);function s(r,l,i,c,p,h){return e(),d("div",null,[n])}var m=t(o,[["render",s]]);export{f as __pageData,m as default};
